package com.ct.db.db.db.phoneextensions.generated;

import com.ct.db.db.db.activesessions.Activesessions;
import com.ct.db.db.db.phoneextensions.Phoneextensions;
import com.speedment.Speedment;
import com.speedment.internal.core.code.AbstractBaseEntity;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * The generated base implementation representing an entity (for example, a
 * row) in the Table db.db.db.phoneextensions.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedPhoneextensionsImpl extends AbstractBaseEntity<Phoneextensions> implements Phoneextensions {
    
    private String phoneNumber;
    private Integer isActive;
    
    protected GeneratedPhoneextensionsImpl() {
        
    }
    
    @Override
    public String getPhoneNumber() {
        return phoneNumber;
    }
    
    @Override
    public Optional<Integer> getIsActive() {
        return Optional.ofNullable(isActive);
    }
    
    @Override
    public final Phoneextensions setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
        return this;
    }
    
    @Override
    public final Phoneextensions setIsActive(Integer isActive) {
        this.isActive = isActive;
        return this;
    }
    
    @Override
    public Stream<Activesessions> findActivesessionsesByPhoneExtensionsPhoneNumber() {
        return managerOf_(Activesessions.class)
                .stream().filter(Activesessions.PHONE_EXTENSIONS_PHONE_NUMBER.equal(this.getPhoneNumber()));
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("phoneNumber = "+Objects.toString(getPhoneNumber()));
        sj.add("isActive = "+Objects.toString(getIsActive().orElse(null)));
        return "PhoneextensionsImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Phoneextensions)) { return false; }
        final Phoneextensions thatPhoneextensions = (Phoneextensions)that;
        if (!Objects.equals(this.getPhoneNumber(), thatPhoneextensions.getPhoneNumber())) {return false; }
        if (!Objects.equals(this.getIsActive(), thatPhoneextensions.getIsActive())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getPhoneNumber());
        hash = 31 * hash + Objects.hashCode(getIsActive());
        return hash;
    }
    
    @Override
    public Class<Phoneextensions> entityClass() {
        return Phoneextensions.class;
    }
    
    @Override
    public Stream<Activesessions> findActivesessionses() {
        return findActivesessionsesByPhoneExtensionsPhoneNumber();
    }
}