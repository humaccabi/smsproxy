package com.ct.db.db.db.users.generated;

import com.ct.db.db.db.activesessions.Activesessions;
import com.ct.db.db.db.users.Users;
import com.speedment.Speedment;
import com.speedment.internal.core.code.AbstractBaseEntity;
import java.util.Objects;
import java.util.Optional;
import java.util.StringJoiner;
import java.util.stream.Stream;
import javax.annotation.Generated;

/**
 * The generated base implementation representing an entity (for example, a
 * row) in the Table db.db.db.users.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedUsersImpl extends AbstractBaseEntity<Users> implements Users {
    
    private String phoneNumber;
    private Double credit;
    private String timestamp;
    private String registrationPhase;
    
    protected GeneratedUsersImpl() {
        
    }
    
    @Override
    public String getPhoneNumber() {
        return phoneNumber;
    }
    
    @Override
    public Optional<Double> getCredit() {
        return Optional.ofNullable(credit);
    }
    
    @Override
    public Optional<String> getTimestamp() {
        return Optional.ofNullable(timestamp);
    }
    
    @Override
    public Optional<String> getRegistrationPhase() {
        return Optional.ofNullable(registrationPhase);
    }
    
    @Override
    public final Users setPhoneNumber(String phoneNumber) {
        this.phoneNumber = phoneNumber;
        return this;
    }
    
    @Override
    public final Users setCredit(Double credit) {
        this.credit = credit;
        return this;
    }
    
    @Override
    public final Users setTimestamp(String timestamp) {
        this.timestamp = timestamp;
        return this;
    }
    
    @Override
    public final Users setRegistrationPhase(String registrationPhase) {
        this.registrationPhase = registrationPhase;
        return this;
    }
    
    @Override
    public Stream<Activesessions> findActivesessionsesByUsersPhoneNumber() {
        return managerOf_(Activesessions.class)
                .stream().filter(Activesessions.USERS_PHONE_NUMBER.equal(this.getPhoneNumber()));
    }
    
    @Override
    public String toString() {
        final StringJoiner sj = new StringJoiner(", ", "{ ", " }");
        sj.add("phoneNumber = "+Objects.toString(getPhoneNumber()));
        sj.add("credit = "+Objects.toString(getCredit().orElse(null)));
        sj.add("timestamp = "+Objects.toString(getTimestamp().orElse(null)));
        sj.add("registrationPhase = "+Objects.toString(getRegistrationPhase().orElse(null)));
        return "UsersImpl "+sj.toString();
    }
    
    @Override
    public boolean equals(Object that) {
        if (this == that) { return true; }
        if (!(that instanceof Users)) { return false; }
        final Users thatUsers = (Users)that;
        if (!Objects.equals(this.getPhoneNumber(), thatUsers.getPhoneNumber())) {return false; }
        if (!Objects.equals(this.getCredit(), thatUsers.getCredit())) {return false; }
        if (!Objects.equals(this.getTimestamp(), thatUsers.getTimestamp())) {return false; }
        if (!Objects.equals(this.getRegistrationPhase(), thatUsers.getRegistrationPhase())) {return false; }
        return true;
    }
    
    @Override
    public int hashCode() {
        int hash = 7;
        hash = 31 * hash + Objects.hashCode(getPhoneNumber());
        hash = 31 * hash + Objects.hashCode(getCredit());
        hash = 31 * hash + Objects.hashCode(getTimestamp());
        hash = 31 * hash + Objects.hashCode(getRegistrationPhase());
        return hash;
    }
    
    @Override
    public Class<Users> entityClass() {
        return Users.class;
    }
    
    @Override
    public Stream<Activesessions> findActivesessionses() {
        return findActivesessionsesByUsersPhoneNumber();
    }
}