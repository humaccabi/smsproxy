package com.ct.db.db.db.users.generated;

import com.ct.db.db.db.users.Users;
import com.ct.db.db.db.users.UsersImpl;
import com.speedment.Speedment;
import com.speedment.exception.SpeedmentException;
import com.speedment.field.FieldIdentifier;
import com.speedment.field.trait.FieldTrait;
import com.speedment.internal.core.manager.sql.AbstractSqlManager;
import com.speedment.util.tuple.Tuple1;
import com.speedment.util.tuple.Tuples;
import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.stream.Stream;
import javax.annotation.Generated;
import static com.speedment.internal.util.sql.ResultSetUtil.*;

/**
 * The generated base manager implementation representing an entity (for
 * example, a row) in the Table db.db.db.users.
 * <p>
 * This file has been automatically generated by Speedment. Any changes made
 * to it will be overwritten.
 * 
 * @author Speedment
 */
@Generated("Speedment")
public abstract class GeneratedUsersManagerImpl extends AbstractSqlManager<Users> implements GeneratedUsersManager {
    
    private final static Tuple1<Class<String>> PRIMARY_KEY_CLASSES = Tuples.of(String.class);
    
    protected GeneratedUsersManagerImpl(Speedment speedment) {
        super(speedment);
        setEntityMapper(this::newEntityFrom);
    }
    
    protected Users newEntityFrom(ResultSet resultSet) throws SpeedmentException, SQLException {
        final Users entity = newEmptyEntity();
        try {
            entity.setPhoneNumber(resultSet.getString(1));
            entity.setCredit(getDouble(resultSet, 2));
            entity.setTimestamp(resultSet.getString(3));
            entity.setRegistrationPhase(resultSet.getString(4));
        }
        catch (SQLException sqle) {
            throw new SpeedmentException(sqle);
        }
        return entity;
    }
    
    @Override
    public Users newEmptyEntity() {
        return new UsersImpl() {
            @Override
            protected Speedment speedment() {
                return speedment;
            }
        };
    }
    
    @Override
    public Object get(Users entity, FieldIdentifier<Users> identifier) {
        switch ((Users.Identifier) identifier) {
            case PHONE_NUMBER : return entity.getPhoneNumber();
            case CREDIT : return entity.getCredit().orElse(null);
            case TIMESTAMP : return entity.getTimestamp().orElse(null);
            case REGISTRATION_PHASE : return entity.getRegistrationPhase().orElse(null);
            default : throw new IllegalArgumentException("Unknown identifier '" + identifier + "'.");
        }
    }
    
    @Override
    public void set(Users entity, FieldIdentifier<Users> identifier, Object value) {
        switch ((Users.Identifier) identifier) {
            case PHONE_NUMBER : entity.setPhoneNumber((String) value); break;
            case CREDIT : entity.setCredit((Double) value); break;
            case TIMESTAMP : entity.setTimestamp((String) value); break;
            case REGISTRATION_PHASE : entity.setRegistrationPhase((String) value); break;
            default : throw new IllegalArgumentException("Unknown identifier '" + identifier + "'.");
        }
    }
    
    @Override
    public Stream<FieldTrait> fields() {
        return Stream.of(
            Users.PHONE_NUMBER,
            Users.CREDIT,
            Users.TIMESTAMP,
            Users.REGISTRATION_PHASE
        );
    }
    
    @Override
    public Stream<FieldTrait> primaryKeyFields() {
        return Stream.of(
            Users.PHONE_NUMBER
        );
    }
    
    @Override
    public Tuple1<Class<String>> getPrimaryKeyClasses() {
        return PRIMARY_KEY_CLASSES;
    }
    
    @Override
    public Users newCopyOf(Users source) {
        final Users copy = new UsersImpl() {
            @Override
            protected final Speedment speedment() {
                return speedment;
            }
        };
        
        copy.setPhoneNumber(source.getPhoneNumber());
        source.getCredit().ifPresent(copy::setCredit);
        source.getTimestamp().ifPresent(copy::setTimestamp);
        source.getRegistrationPhase().ifPresent(copy::setRegistrationPhase);
        
        return copy;
    }
}